{"version":3,"sources":["components/Chains/types.ts","utils/helpers.ts","components/Chains/helpers.ts","components/Chains/ChainCard.tsx","services/chain-api.ts","components/Chains/ChainHeader.tsx","components/Chains/ChainCardContainer.tsx","components/Chains/ChainContainer.tsx","components/Chains/Chains.tsx","ColorModeSwitcher.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ChainKind","ChainStatus","defaultText","getChainResponseIdentifier","kind","hashIdentifier","TezosNode","levelIdentifier","ChainCard","props","hash","size","data","colorMode","useColorMode","name","url","onQuerySuccess","maxBlockSize","chainQueryResponse","payload","height","getChainResponse","useQuery","axios","get","getChainStatus","refetchInterval","refetchIntervalInBackground","refetchOnWindowFocus","onSuccess","chainStatusDetails","max","differenceInHeight","Math","abs","isNaN","status","undefined","description","Synced","NotSynced","Failed","getChainStatusDetails","chainStatusColor","getStatusColor","p","shadow","w","fontSize","_hover","bg","pb","mt","mr","h","borderRadius","color","fontWeight","replaceAll","pt","as","FiBox","Intl","NumberFormat","format","substr","length","ChainHeader","title","ChainCardContainer","children","ChainContainer","Chains","React","maxBlocksize","setMaxBlockSize","handleOnQuerySuccess","map","tzdata","index","cards","d","i","ColorModeSwitcher","toggleColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","variant","marginLeft","onClick","icon","aria-label","App","queryClient","QueryClient","handleRefresh","a","refetchQueries","QueryClientProvider","client","theme","minH","colorScheme","justifySelf","TzData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a23eb368.chunk.js","sourcesContent":["export enum ChainKind {\n    TezosNode = \"tezos-node\",\n    TezosIndexer = \"tzindex\"\n}\n\nexport interface ChainQueryResponse {\n    height: number,\n    hash: string\n}\n\nexport enum ChainStatus {\n    Synced = \"synced\",\n    NotSynced = \"not_synced\",\n    Failed = \"failed\"\n}\n\nexport interface ChainStatusDetails {\n    status: ChainStatus|undefined,\n    description: string|undefined\n}\n\nexport interface ChainDataCard {\n    title: string,\n    kind: ChainKind,\n    url: string\n}\n\nexport interface ChainData {\n    title: string\n    cards: ChainDataCard[]\n}","export const defaultText = '--'","import { AxiosResponse } from \"axios\";\nimport { UseQueryResult } from \"react-query\";\nimport { ChainKind, ChainQueryResponse, ChainStatus, ChainStatusDetails } from \"./types\";\n\nexport const getChainResponse = (payload: UseQueryResult<AxiosResponse<any>, unknown>, kind: ChainKind): ChainQueryResponse => {\n    const { hashIdentifier, levelIdentifier } = getChainResponseIdentifier(kind)\n    \n    return {\n        hash: payload?.data?.data[hashIdentifier],\n        height: payload?.data?.data[levelIdentifier]\n    }\n}\n\nexport const getChainResponseIdentifier = (kind: ChainKind) => {\n    return {\n        hashIdentifier: kind === ChainKind.TezosNode ? 'hash' : 'block_hash',\n        levelIdentifier: kind === ChainKind.TezosNode ? 'level' : 'height'\n    }\n}\n\nexport const shortenHash = (hash: string) => {\n    return hash.substr(0, 4) + '...' + hash.substr(hash.length - 2, hash.length)\n}\n\nexport const formatBlockSize = (size: number) => {\n    return new Intl.NumberFormat().format(size)\n}\n\nexport const convertKebabCase = (data: string): string => {\n    return data.replaceAll(\"_\", \" \")\n}\n\nexport const getStatusColor = (status: ChainStatus|undefined) => {\n    switch (status) {\n        case ChainStatus.Synced:\n            return \"green.500\"\n        case ChainStatus.NotSynced:\n            return \"orange.500\"\n        case ChainStatus.Failed:\n            return \"red.500\"\n        default:\n            return \"gray.500\"\n    }\n}\n\nexport const getChainStatusDetails = (max: number, height: number): ChainStatusDetails => {\n    const differenceInHeight = Math.abs(max - height)\n    if(isNaN(differenceInHeight)) {\n        return {\n            status: undefined,\n            description: undefined\n        }\n    }\n\n    if(differenceInHeight === 0) {\n        return {\n            status: ChainStatus.Synced,\n            description: \"in sync\"\n        }\n    }\n\n    const description = `${differenceInHeight} block${differenceInHeight > 1 ? 's' : ''} out of sync`\n\n    if(differenceInHeight <= 5) {\n        return {\n            status: ChainStatus.NotSynced,\n            description\n        }\n    }\n\n    return {\n        status: ChainStatus.Failed,\n        description\n    }\n}\n","import * as React from \"react\"\nimport { Text, Box, Flex, Spacer, Divider, Icon, WrapItem, useColorMode } from \"@chakra-ui/react\"\nimport { FiBox } from \"react-icons/fi\"\nimport { useQuery } from 'react-query'\n\nimport { ChainKind } from \"./types\"\nimport { defaultText } from \"../../utils/helpers\"\nimport { getChainStatus } from \"../../services/chain-api\"\nimport { getChainResponse, shortenHash, formatBlockSize, getChainResponseIdentifier, getChainStatusDetails, getStatusColor, convertKebabCase } from \"./helpers\"\n\nexport interface ChainCardProps {\n    name: string\n    kind: ChainKind\n    url: string\n    onQuerySuccess: (size: number) => void\n    maxBlockSize: number\n}\n\nexport const ChainCard = (props: ChainCardProps) => {\n    const { colorMode } = useColorMode()\n    const { name, kind, url, onQuerySuccess, maxBlockSize } = props\n\n    const chainQuery = useQuery(`chainQuery:${kind}:${name}`, () => getChainStatus(url, kind), {\n        refetchInterval: 1000 * 60,\n        refetchIntervalInBackground: true,\n        refetchOnWindowFocus: true,\n        onSuccess: (data) => {\n            const { levelIdentifier } = getChainResponseIdentifier(kind)\n            if(typeof data.data[levelIdentifier] === \"number\") {\n                return onQuerySuccess(data.data[levelIdentifier])\n            }\n        }\n    })\n    const chainQueryResponse = getChainResponse(chainQuery, kind)\n    const chainStatusDetails = getChainStatusDetails(maxBlockSize, chainQueryResponse.height)\n    const chainStatusColor = getStatusColor(chainStatusDetails.status)\n    \n    return (\n    <WrapItem>\n        <Box p={4} shadow=\"lg\" w=\"400px\" fontSize=\"sm\" _hover={{\n            bg: colorMode  === \"light\" ? \"gray.50\" : \"whiteAlpha.50\"\n        }}>\n            <Flex pb={2}>\n                <Box bg={chainStatusColor} mt={2} mr={2} w={2} h={2} borderRadius=\"50%\"></Box>\n                <Text>{name || defaultText}</Text>\n                <Spacer />\n                <Text mr={1}>status: </Text>\n                <Text color={chainStatusColor} fontWeight=\"bold\">{chainStatusDetails.status ? convertKebabCase(chainStatusDetails.status) : defaultText}</Text>\n            </Flex>\n\n            <Text pb={2} fontSize=\"small\">{kind === ChainKind.TezosNode ? \"blockchain\" : \"indexer\"} node</Text>\n\n            <Divider />\n\n            <Flex pt={2} pb={1}>\n                <Icon as={FiBox} mr={2} mt={1} />\n                <Text>{chainQueryResponse.height ? formatBlockSize(chainQueryResponse.height) : chainQueryResponse.height}</Text>\n                <Spacer />\n                <Text>{chainQueryResponse.hash ? shortenHash(chainQueryResponse.hash) : defaultText}</Text>\n            </Flex>\n\n            <Text fontSize=\"small\">{chainStatusDetails.description || defaultText}</Text>\n        </Box>\n    </WrapItem>\n    )\n}","import axios from \"axios\"\n\nimport { ChainKind } from \"../components/Chains/types\"\n\nexport const getChainStatus = (url: string, kind: ChainKind) => {\n    url += kind === ChainKind.TezosNode ? '/chains/main/blocks/head/header' : '/explorer/tip'\n\n    return axios.get(url)\n}","import * as React from \"react\"\nimport { Text } from \"@chakra-ui/react\"\n\nexport interface ChainHeaderProps {\n    title: string\n}\n\nexport const ChainHeader = (props: ChainHeaderProps) => {\n    return (<Text fontSize=\"lg\" pb={4}>{props.title}</Text>)\n}","import * as React from \"react\"\nimport { Wrap } from \"@chakra-ui/react\"\n\nexport interface ChainCardContainerProps {\n    children: React.ReactNode\n}\n\nexport const ChainCardContainer = (props: ChainCardContainerProps) => {\n    return (<Wrap>{props.children}</Wrap>)\n}","import * as React from \"react\"\nimport { Box } from \"@chakra-ui/react\"\n\nexport interface ChainContainerProps {\n    children: React.ReactNode\n}\n\nexport const ChainContainer = (props: ChainContainerProps) => {\n    return (<Box pb={8}>{props.children}</Box>)\n}","import * as React from \"react\"\n\nimport { ChainCard } from \"./ChainCard\"\nimport { ChainHeader } from \"./ChainHeader\"\nimport { ChainCardContainer } from \"./ChainCardContainer\"\nimport { ChainContainer } from \"./ChainContainer\"\n// import TzData from \"../../data/chains.json\"\nimport { ChainData, ChainKind } from \"./types\"\n\nexport interface ChainsProps {\n    data: ChainData[]\n}\n\nexport const Chains = (props: ChainsProps) => {\n    const [maxBlocksize, setMaxBlockSize] = React.useState(0) \n\n    const handleOnQuerySuccess = (size: number) => {\n        if(size > maxBlocksize) {\n            setMaxBlockSize(size)\n        }\n    }\n\n    return (\n        <>\n            {props.data.map((tzdata, index) => (\n                <ChainContainer key={`${tzdata.title}-${index}`}>\n                    <ChainHeader title={tzdata.title}/>\n                    <ChainCardContainer>\n                        {tzdata.cards.map((d, i) => (\n                            <ChainCard key={`${d.title}-${i}-${d.title}`} name={d.title} kind={d.kind as unknown as ChainKind} url={d.url} \n                            maxBlockSize={maxBlocksize} onQuerySuccess={handleOnQuerySuccess}/>\n                        ))}\n                        </ChainCardContainer>\n                </ChainContainer>\n            ))}\n        </>\n    )\n}","import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import * as React from \"react\"\nimport {\n  ChakraProvider,\n  Box,\n  Text,\n  theme,\n  Flex,\n  Spacer,\n  IconButton,\n} from \"@chakra-ui/react\"\nimport { FaSpinner } from \"react-icons/fa\"\nimport { QueryClient, QueryClientProvider,  } from \"react-query\"\nimport { ReactQueryDevtools } from 'react-query/devtools'\n\nimport TzData from \"./data/chains.json\"\nimport { ChainData } from \"./components/Chains\"\nimport { Chains } from \"./components/Chains\"\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\"\n\n\nexport const App = () => {\n  const queryClient = new QueryClient()\n  \n  const handleRefresh = async () => {\n    await queryClient.refetchQueries()  \n  }\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ChakraProvider theme={theme}>\n        <Box fontSize=\"lg\" minH=\"100vh\" p={8}>\n          <Flex pb={4}>\n            <Text fontSize=\"xl\" fontWeight=\"semibold\">Tezos Mainnet Status Sync</Text>\n            <Spacer />\n            <IconButton colorScheme=\"green\" aria-label=\"Refresh\" icon={<FaSpinner />} onClick={handleRefresh} />\n            <ColorModeSwitcher justifySelf=\"flex-end\" />\n          </Flex>\n          <Chains data={TzData as unknown as ChainData[]}/>\n        </Box>\n      </ChakraProvider>\n      <ReactQueryDevtools />\n    </QueryClientProvider>\n  )\n}\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}